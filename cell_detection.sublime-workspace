{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"la",
				"labels_batch"
			],
			[
				"batc",
				"batch_size"
			],
			[
				"encod",
				"encoding_a"
			],
			[
				"enco",
				"encoding_a"
			],
			[
				"embed",
				"embeds_a"
			],
			[
				"enc",
				"encoding_a"
			],
			[
				"embe",
				"embedding_size"
			],
			[
				"input_",
				"input_sentence"
			],
			[
				"encoder",
				"encoder_a"
			],
			[
				"bat",
				"batch_size"
			],
			[
				"pre",
				"prediction"
			],
			[
				"opti",
				"optim_params"
			],
			[
				"opt",
				"optim_params"
			],
			[
				"b_",
				"b_p"
			],
			[
				"w_",
				"w_x"
			],
			[
				"para",
				"parameters"
			],
			[
				"inpu",
				"input_data"
			],
			[
				"pred",
				"predictions"
			],
			[
				"wei",
				"weight_hh_l0"
			],
			[
				"hi",
				"hidden_b"
			],
			[
				"hidde",
				"hidden_a"
			],
			[
				"hidden",
				"hidden_b"
			],
			[
				"stat",
				"state_dict_a"
			],
			[
				"hide",
				"hidden_a"
			],
			[
				"init",
				"initialize_hidden"
			],
			[
				"ini",
				"initialize_hidden"
			],
			[
				"net",
				"network_save_path"
			],
			[
				"traini",
				"training_loss"
			],
			[
				"in",
				"input_data"
			],
			[
				"input",
				"input_data"
			],
			[
				"senten",
				"sentence_to_vecs"
			],
			[
				"ba",
				"batch_a"
			],
			[
				"trainin",
				"training_dir"
			],
			[
				"final",
				"final_loss"
			],
			[
				"optimi",
				"optimizer_b"
			],
			[
				"labe",
				"label_batch"
			],
			[
				"copy_",
				"copy_embeddings"
			],
			[
				"pretr",
				"pretrained_embeddings"
			],
			[
				"LS",
				"LTSMEncoder"
			],
			[
				"emb",
				"embeddings"
			],
			[
				"embedding",
				"embedding_vecs"
			],
			[
				"wor",
				"word_count"
			],
			[
				"conte",
				"context_size"
			],
			[
				"embeddi",
				"embedding_dim"
			],
			[
				"text",
				"text_to_counter"
			],
			[
				"tex",
				"text_to_counter"
			],
			[
				"tec",
				"text_to_counter"
			],
			[
				"uni",
				"unique_text"
			],
			[
				"test_v",
				"test_vocab_download_charngram_vectors"
			],
			[
				"half",
				"half_size_height"
			],
			[
				"heig",
				"height_smaller_than_width"
			],
			[
				"half_s",
				"half_size_width"
			],
			[
				"kapp",
				"kappa_weights"
			],
			[
				"get",
				"get_shape"
			],
			[
				"em",
				"embedding_size"
			]
		]
	},
	"buffers":
	[
		{
			"file": ".gitignore",
			"settings":
			{
				"buffer_size": 1239,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 83.0,
		"last_filter": "python",
		"selected_items":
		[
			[
				"python",
				"Build With: Python"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"Cpp",
				"Package Control: Upgrade Package"
			]
		],
		"width": 398.0
	},
	"console":
	{
		"height": 118.0,
		"history":
		[
			"CppBuilder",
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/oanaucs/repos/cell_detection"
	],
	"file_history":
	[
		"/home/oanaucs/repos/al_benchmark/input_pipeline/download_and_convert_cifar10.py",
		"/home/oanaucs/repos/al_benchmark/.gitignore",
		"/home/oanaucs/repos/wstud_text_alignment_ws17/nets/siamese_nn.py",
		"/home/oanaucs/repos/wstud_text_alignment_ws17/input/im2col_stanford.py",
		"/home/oanaucs/repos/wstud_text_alignment_ws17/nets/min_pool.py",
		"/home/oanaucs/repos/wstud_text_alignment_ws17/nets/cnn_encoder.py",
		"/home/oanaucs/repos/wstud_text_alignment_ws17/nets/lstm_encoder.py",
		"/home/oanaucs/repos/wstud_text_alignment_ws17/input/batch_loader.py",
		"/home/oanaucs/repos/wstud_text_alignment_ws17/input/embedding.py",
		"/home/oanaucs/repos/wstud_text_alignment_ws17/training/save_training.py",
		"/home/oanaucs/repos/wstud_text_alignment_ws17/input/vocab_sick.py",
		"/home/oanaucs/repos/wstud_text_alignment_ws17/evaluation/test_cnn_evaluation.py",
		"/home/oanaucs/repos/wstud_text_alignment_ws17/training/training_LTSM_encoder.py",
		"/home/oanaucs/repos/copied/nets/siamese_nn.py",
		"/home/oanaucs/repos/wstud_text_alignment_ws17/nets/rnn.py",
		"/home/oanaucs/repos/wstud_text_alignment_ws17/input/word_embeddings_sick.py",
		"/home/oanaucs/repos/Sentence-similarity-classifier-for-pyTorch/similarity_estimator/networks.py",
		"/home/oanaucs/repos/wstud_text_alignment_ws17/input/word_embeddings_pan.py",
		"/home/oanaucs/Documents/Sentence-similarity-classifier-for-pyTorch-master/similarity_estimator/training.py",
		"/home/oanaucs/Documents/Sentence-similarity-classifier-for-pyTorch-master/similarity_estimator/sim_util.py",
		"/home/oanaucs/Documents/Sentence-similarity-classifier-for-pyTorch-master/similarity_estimator/sick_extender.py",
		"/home/oanaucs/repos/wstud_text_alignment_ws17/nets/LSTMEncoder.py",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/input/word_embeddings_tutorial.py",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/input/torchtext_input.py",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/input/word_embeddings_pan.py",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/training/training_LTSM_encoder.py",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/nets/LTSM_encoder.py",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/input/common/test_markers.py",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/input/common/torchtext_test_case.py",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/experiments/data_analysis/transform-raw-corpus.ipynb",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/input/word2vec.py",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/input/word2vec_dataset.py",
		"/home/oanaucs/repos/models/research/slim/README.md",
		"/home/oanaucs/repos/models/research/slim/preprocessing/inception_preprocessing.py",
		"/home/oanaucs/repos/models/research/resnet/resnet_main.py",
		"/home/oanaucs/repos/models/research/slim/slim_walkthrough.ipynb",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/evaluation/test_cnn_evaluation.py",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/training/train_test_cnn.py",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/nets/one_layer_cnn.py",
		"/home/oanaucs/repos/models/research/inception/README.md",
		"/home/oanaucs/.cache/.fr-ulyKui/text8",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/preprocessing/preprocess_test_cnn.py",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/input/batch_loader.py",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/input/word2vec_dataset",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/Readme.md",
		"/home/oanaucs/repos/word2vec_tf/ptb_tutorial_tf.py",
		"/home/oanaucs/repos/hyperparam_search/grid_test.py",
		"/etc/bash.bashrc",
		"/home/oanaucs/cudnn_samples_v7/mnistCUDNN/Makefile",
		"/home/oanaucs/repos/word2vec_tf/word2vec.py",
		"/home/oanaucs/repos/word2vec_tf/loss_cohen_kappa.py",
		"/home/oanaucs/Downloads/word_embeddings_tutorial.py",
		"/home/oanaucs/repos/word2vec_tf/reader_tutorial.py",
		"/home/oanaucs/repos/wstud-text-alignment-ws17/data_input/word2vec.py",
		"/home/oanaucs/repos/word2vec_tf/util.py",
		"/home/oanaucs/repos/word2vec_pytorch/word2vec.py",
		"/home/oanaucs/repos/word2vec_tf/__init__.py"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 80.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"sublime-pro\t",
			"state_di",
			"input",
			"self",
			"\n        # for param in self.parameters():\n        #     if param.grad is not None:\n        #         print('param grad sum', param.grad.sum())",
			"print",
			"p_0",
			"\n        ",
			"current_len",
			"current_",
			"vocab",
			"]\n",
			"s",
			":])",
			"self",
			"itos",
			"stoi",
			"self.opt",
			"state_dict",
			"vocab",
			"torch",
			"output",
			"init",
			"opts.",
			"batch_siz",
			"\n\t\t",
			"kenlm",
			"pd",
			"pandas",
			"input_data",
			"vectors",
			").",
			"vector",
			"slow",
			"slow]",
			":\n",
			"step",
			"global_ste",
			"session",
			"embedd",
			"sess",
			"summary",
			"word_emb",
			"batch",
			"1",
			"),",
			"aaaaaaaaaaaaa",
			"preprocess",
			"preprocessing",
			"train_",
			"resnet",
			"image_preprocessing_fn",
			"preprocessi",
			"train",
			"resnet",
			"session",
			"vocabulary",
			"build_dataset",
			"dataset",
			" :",
			"self._lr_up",
			"assign_lr",
			"assign_lor",
			"session.run",
			"sess.run",
			"metrics",
			"accuracy",
			"streaming",
			"update_op",
			"())",
			"input_",
			"input_.tar",
			", ",
			"input_",
			"input_.targets",
			"PTBModel",
			"data_path",
			"model",
			"Variable",
			"LongTensor",
			"longtensor",
			"LongTensor",
			"model",
			"ngram",
			"module",
			"session",
			"build_da",
			"nvcc",
			"export"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": ".gitignore",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1239,
						"regions":
						{
						},
						"selection":
						[
							[
								1049,
								1049
							]
						],
						"settings":
						{
							"syntax": "Packages/Git Formats/Git Ignore.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1326.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 198.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "cell_detection.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 65.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 342.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 260.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
